'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.42000
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.ComponentModel
Imports System.Data
Imports System.Diagnostics
Imports System.Web.Services
Imports System.Web.Services.Protocols
Imports System.Xml.Serialization

'
'This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.42000.
'
Namespace CertifiedLookup
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Web.Services.WebServiceBindingAttribute(Name:="BasicHttpBinding_ILookup", [Namespace]:="http://tempuri.org/")>  _
    Partial Public Class Lookup
        Inherits System.Web.Services.Protocols.SoapHttpClientProtocol
        
        Private GetInventoryCTRByManyPartOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetInventoryCTROperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetInstallationKitOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetAllInstallationKitsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetWarningsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetAllWarningsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private useDefaultCredentialsSetExplicitly As Boolean
        
        '''<remarks/>
        Public Sub New()
            MyBase.New
            Me.Url = Global.Pigeon.My.MySettings.Default.Pigeon_CertifiedLookup_Lookup
            If (Me.IsLocalFileSystemWebService(Me.Url) = true) Then
                Me.UseDefaultCredentials = true
                Me.useDefaultCredentialsSetExplicitly = false
            Else
                Me.useDefaultCredentialsSetExplicitly = true
            End If
        End Sub
        
        Public Shadows Property Url() As String
            Get
                Return MyBase.Url
            End Get
            Set
                If (((Me.IsLocalFileSystemWebService(MyBase.Url) = true)  _
                            AndAlso (Me.useDefaultCredentialsSetExplicitly = false))  _
                            AndAlso (Me.IsLocalFileSystemWebService(value) = false)) Then
                    MyBase.UseDefaultCredentials = false
                End If
                MyBase.Url = value
            End Set
        End Property
        
        Public Shadows Property UseDefaultCredentials() As Boolean
            Get
                Return MyBase.UseDefaultCredentials
            End Get
            Set
                MyBase.UseDefaultCredentials = value
                Me.useDefaultCredentialsSetExplicitly = true
            End Set
        End Property
        
        '''<remarks/>
        Public Event GetInventoryCTRByManyPartCompleted As GetInventoryCTRByManyPartCompletedEventHandler
        
        '''<remarks/>
        Public Event GetInventoryCTRCompleted As GetInventoryCTRCompletedEventHandler
        
        '''<remarks/>
        Public Event GetInstallationKitCompleted As GetInstallationKitCompletedEventHandler
        
        '''<remarks/>
        Public Event GetAllInstallationKitsCompleted As GetAllInstallationKitsCompletedEventHandler
        
        '''<remarks/>
        Public Event GetWarningsCompleted As GetWarningsCompletedEventHandler
        
        '''<remarks/>
        Public Event GetAllWarningsCompleted As GetAllWarningsCompletedEventHandler
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smtc.certifiedtransmission.com/app/wcf/external/ILookup/GetInventoryCTRByM"& _ 
            "anyPart", RequestNamespace:="http://smtc.certifiedtransmission.com/app/wcf/external/", ResponseNamespace:="http://smtc.certifiedtransmission.com/app/wcf/external/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetInventoryCTRByManyPart(<System.Xml.Serialization.XmlElementAttribute(IsNullable:=true)> ByVal uKey As String, <System.Xml.Serialization.XmlArrayAttribute(IsNullable:=true), System.Xml.Serialization.XmlArrayItemAttribute([Namespace]:="http://schemas.microsoft.com/2003/10/Serialization/Arrays")> ByVal uManyPart() As String) As <System.Xml.Serialization.XmlElementAttribute(IsNullable:=true)> System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetInventoryCTRByManyPart", New Object() {uKey, uManyPart})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetInventoryCTRByManyPartAsync(ByVal uKey As String, ByVal uManyPart() As String)
            Me.GetInventoryCTRByManyPartAsync(uKey, uManyPart, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetInventoryCTRByManyPartAsync(ByVal uKey As String, ByVal uManyPart() As String, ByVal userState As Object)
            If (Me.GetInventoryCTRByManyPartOperationCompleted Is Nothing) Then
                Me.GetInventoryCTRByManyPartOperationCompleted = AddressOf Me.OnGetInventoryCTRByManyPartOperationCompleted
            End If
            Me.InvokeAsync("GetInventoryCTRByManyPart", New Object() {uKey, uManyPart}, Me.GetInventoryCTRByManyPartOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetInventoryCTRByManyPartOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetInventoryCTRByManyPartCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetInventoryCTRByManyPartCompleted(Me, New GetInventoryCTRByManyPartCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smtc.certifiedtransmission.com/app/wcf/external/ILookup/GetInventoryCTR", RequestNamespace:="http://smtc.certifiedtransmission.com/app/wcf/external/", ResponseNamespace:="http://smtc.certifiedtransmission.com/app/wcf/external/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetInventoryCTR(<System.Xml.Serialization.XmlElementAttribute(IsNullable:=true)> ByVal uKey As String, <System.Xml.Serialization.XmlElementAttribute(IsNullable:=true)> ByVal uPart As String) As <System.Xml.Serialization.XmlElementAttribute(IsNullable:=true)> System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetInventoryCTR", New Object() {uKey, uPart})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetInventoryCTRAsync(ByVal uKey As String, ByVal uPart As String)
            Me.GetInventoryCTRAsync(uKey, uPart, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetInventoryCTRAsync(ByVal uKey As String, ByVal uPart As String, ByVal userState As Object)
            If (Me.GetInventoryCTROperationCompleted Is Nothing) Then
                Me.GetInventoryCTROperationCompleted = AddressOf Me.OnGetInventoryCTROperationCompleted
            End If
            Me.InvokeAsync("GetInventoryCTR", New Object() {uKey, uPart}, Me.GetInventoryCTROperationCompleted, userState)
        End Sub
        
        Private Sub OnGetInventoryCTROperationCompleted(ByVal arg As Object)
            If (Not (Me.GetInventoryCTRCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetInventoryCTRCompleted(Me, New GetInventoryCTRCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smtc.certifiedtransmission.com/app/wcf/external/ILookup/GetInstallationKit"& _ 
            "", RequestNamespace:="http://smtc.certifiedtransmission.com/app/wcf/external/", ResponseNamespace:="http://smtc.certifiedtransmission.com/app/wcf/external/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetInstallationKit(<System.Xml.Serialization.XmlElementAttribute(IsNullable:=true)> ByVal uKey As String, <System.Xml.Serialization.XmlElementAttribute(IsNullable:=true)> ByVal uPart As String) As <System.Xml.Serialization.XmlElementAttribute(IsNullable:=true)> System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetInstallationKit", New Object() {uKey, uPart})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetInstallationKitAsync(ByVal uKey As String, ByVal uPart As String)
            Me.GetInstallationKitAsync(uKey, uPart, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetInstallationKitAsync(ByVal uKey As String, ByVal uPart As String, ByVal userState As Object)
            If (Me.GetInstallationKitOperationCompleted Is Nothing) Then
                Me.GetInstallationKitOperationCompleted = AddressOf Me.OnGetInstallationKitOperationCompleted
            End If
            Me.InvokeAsync("GetInstallationKit", New Object() {uKey, uPart}, Me.GetInstallationKitOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetInstallationKitOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetInstallationKitCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetInstallationKitCompleted(Me, New GetInstallationKitCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smtc.certifiedtransmission.com/app/wcf/external/ILookup/GetAllInstallation"& _ 
            "Kits", RequestNamespace:="http://smtc.certifiedtransmission.com/app/wcf/external/", ResponseNamespace:="http://smtc.certifiedtransmission.com/app/wcf/external/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetAllInstallationKits(<System.Xml.Serialization.XmlElementAttribute(IsNullable:=true)> ByVal uKey As String) As <System.Xml.Serialization.XmlElementAttribute(IsNullable:=true)> System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetAllInstallationKits", New Object() {uKey})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetAllInstallationKitsAsync(ByVal uKey As String)
            Me.GetAllInstallationKitsAsync(uKey, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetAllInstallationKitsAsync(ByVal uKey As String, ByVal userState As Object)
            If (Me.GetAllInstallationKitsOperationCompleted Is Nothing) Then
                Me.GetAllInstallationKitsOperationCompleted = AddressOf Me.OnGetAllInstallationKitsOperationCompleted
            End If
            Me.InvokeAsync("GetAllInstallationKits", New Object() {uKey}, Me.GetAllInstallationKitsOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetAllInstallationKitsOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetAllInstallationKitsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetAllInstallationKitsCompleted(Me, New GetAllInstallationKitsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smtc.certifiedtransmission.com/app/wcf/external/ILookup/GetWarnings", RequestNamespace:="http://smtc.certifiedtransmission.com/app/wcf/external/", ResponseNamespace:="http://smtc.certifiedtransmission.com/app/wcf/external/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetWarnings(<System.Xml.Serialization.XmlElementAttribute(IsNullable:=true)> ByVal uKey As String, <System.Xml.Serialization.XmlElementAttribute(IsNullable:=true)> ByVal uPart As String) As <System.Xml.Serialization.XmlElementAttribute(IsNullable:=true)> System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetWarnings", New Object() {uKey, uPart})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetWarningsAsync(ByVal uKey As String, ByVal uPart As String)
            Me.GetWarningsAsync(uKey, uPart, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetWarningsAsync(ByVal uKey As String, ByVal uPart As String, ByVal userState As Object)
            If (Me.GetWarningsOperationCompleted Is Nothing) Then
                Me.GetWarningsOperationCompleted = AddressOf Me.OnGetWarningsOperationCompleted
            End If
            Me.InvokeAsync("GetWarnings", New Object() {uKey, uPart}, Me.GetWarningsOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetWarningsOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetWarningsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetWarningsCompleted(Me, New GetWarningsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smtc.certifiedtransmission.com/app/wcf/external/ILookup/GetAllWarnings", RequestNamespace:="http://smtc.certifiedtransmission.com/app/wcf/external/", ResponseNamespace:="http://smtc.certifiedtransmission.com/app/wcf/external/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetAllWarnings(<System.Xml.Serialization.XmlElementAttribute(IsNullable:=true)> ByVal uKey As String) As <System.Xml.Serialization.XmlElementAttribute(IsNullable:=true)> System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetAllWarnings", New Object() {uKey})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetAllWarningsAsync(ByVal uKey As String)
            Me.GetAllWarningsAsync(uKey, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetAllWarningsAsync(ByVal uKey As String, ByVal userState As Object)
            If (Me.GetAllWarningsOperationCompleted Is Nothing) Then
                Me.GetAllWarningsOperationCompleted = AddressOf Me.OnGetAllWarningsOperationCompleted
            End If
            Me.InvokeAsync("GetAllWarnings", New Object() {uKey}, Me.GetAllWarningsOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetAllWarningsOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetAllWarningsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetAllWarningsCompleted(Me, New GetAllWarningsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        Public Shadows Sub CancelAsync(ByVal userState As Object)
            MyBase.CancelAsync(userState)
        End Sub
        
        Private Function IsLocalFileSystemWebService(ByVal url As String) As Boolean
            If ((url Is Nothing)  _
                        OrElse (url Is String.Empty)) Then
                Return false
            End If
            Dim wsUri As System.Uri = New System.Uri(url)
            If ((wsUri.Port >= 1024)  _
                        AndAlso (String.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) = 0)) Then
                Return true
            End If
            Return false
        End Function
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")>  _
    Public Delegate Sub GetInventoryCTRByManyPartCompletedEventHandler(ByVal sender As Object, ByVal e As GetInventoryCTRByManyPartCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetInventoryCTRByManyPartCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")>  _
    Public Delegate Sub GetInventoryCTRCompletedEventHandler(ByVal sender As Object, ByVal e As GetInventoryCTRCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetInventoryCTRCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")>  _
    Public Delegate Sub GetInstallationKitCompletedEventHandler(ByVal sender As Object, ByVal e As GetInstallationKitCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetInstallationKitCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")>  _
    Public Delegate Sub GetAllInstallationKitsCompletedEventHandler(ByVal sender As Object, ByVal e As GetAllInstallationKitsCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetAllInstallationKitsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")>  _
    Public Delegate Sub GetWarningsCompletedEventHandler(ByVal sender As Object, ByVal e As GetWarningsCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetWarningsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")>  _
    Public Delegate Sub GetAllWarningsCompletedEventHandler(ByVal sender As Object, ByVal e As GetAllWarningsCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetAllWarningsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
End Namespace
